# 專案需求建議書 (RFP)

## 一、專案背景
本專案希望開發一套程式碼分析工具，能夠針對指定的專案資料夾進行靜態分析，並整合 Git 版本控制資訊，幫助開發團隊了解專案規模、複雜度與維護熱點。

---

## 二、功能需求

### 1. 程式碼分析
- 讀取指定專案資料夾  
- 分析程式碼資訊，包括：  
  - 行數 (Lines of Code)  
  - 檔案數量  
  - 程式碼複雜度 (Cyclomatic Complexity 等指標)  

### 2. Git Log 分析
- 讀取專案 Git Log  
- 統計各檔案異動次數  
- 輸出異動最頻繁的檔案清單  

### 3. 視覺化儀表板
- 儀表板呈現程式碼與 Git 分析結果  
- 圖表 (長條圖、圓餅圖等) 顯示：  
  - 行數分佈  
  - 檔案異動頻率  
  - 複雜度分佈  

### 4. 使用者介面
- **按鈕**  
  - 載入資料夾  
  - 開始分析  
- **表格顯示**  
  - 呈現分析數據  
  - 每個欄位提供說明文字，解釋數據含義  

---

## 三、非功能性需求
- 介面需簡潔，支援桌面瀏覽器操作  
- 分析需在合理時間內完成 (針對 10 萬行程式碼，需於 1 分鐘內產出結果)  
- 系統具備擴充性，可日後增加更多分析指標  

---

## 四、技術棧
- **程式語言**：Python
- **後端框架**：FastAPI
- **程式碼分析工具**：Lizard (用於計算行數、複雜度等)
- **Git 分析工具**：GitPython
- **前端建議**：直接以 FastAPI 提供靜態頁面
- **圖表視覺化**：Chart.js

---

## 五、實作紀錄

### 2025-10-15 專案完成

#### 已實作功能
1. **後端模組**
   - `code_analyzer.py` - 使用 Lizard 進行程式碼分析
   - `git_analyzer.py` - 使用 GitPython 進行 Git 歷史分析
   - `main.py` - FastAPI 主程式，提供 RESTful API

2. **前端介面**
   - 響應式設計，支援桌面瀏覽器
   - 使用 Chart.js 呈現複雜度分佈圖表和異動頻率圖表
   - 詳細的資料表格顯示檔案資訊
   - 每個數據欄位都有說明文字

3. **API 端點**
   - `POST /api/analyze/code` - 程式碼分析
   - `POST /api/analyze/git` - Git 歷史分析
   - `POST /api/analyze/all` - 完整分析
   - `GET /api/health` - 健康檢查

#### 技術問題與解決方案

**問題 1：瀏覽器 Favicon 404 錯誤**
- **現象**：瀏覽器訪問時出現 "GET /favicon.ico HTTP/1.1" 404 Not Found
- **原因**：瀏覽器自動請求網站圖示 (favicon)，但專案中未提供該檔案
- **解決方案**：在 HTML `<head>` 中加入 favicon 連結，使用 data URI 內嵌 SVG emoji 圖示
  ```html
  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>📊</text></svg>">
  ```
- **優點**：
  - 不需要額外的圖示檔案
  - 減少 HTTP 請求
  - 圖示與專案主題一致（使用 📊 圖表 emoji）

**問題 2：程式碼分析結果檔案數量為 0**
- **現象**：執行程式碼分析後，顯示檔案數量為 0，似乎沒有執行分析
- **原因**：Lizard 在 Windows 環境下對路徑處理有問題，原本的 exclude_pattern 格式不正確
- **解決方案**：
  1. 改用絕對路徑：`self.project_path.absolute()`
  2. 修正排除模式為正規表達式格式：`r"(node_modules|venv|\.git|dist|build|__pycache__|\.venv|env)"`
  3. 明確指定支援所有語言：`exts=lizard.get_extensions([])`
- **修改位置**：`code_analyzer.py` line 34-37
- **效果**：成功分析所有專案檔案，正確統計檔案數量和程式碼行數

**問題 3：Git 圖表佈局優化**
- **現象**：圓餅圖涵蓋面積太大，視覺效果不佳
- **需求**：Git 歷史分析除了圓餅圖，也需要長條圖，並用兩欄呈現
- **解決方案**：
  1. 新增長條圖顯示異動最頻繁的檔案 Top 10
  2. 使用 CSS Grid 佈局將兩個圖表並排顯示
  3. 新增 `.chart-grid` 類別支援兩欄佈局
  4. 在行動裝置上自動切換為單欄顯示（響應式設計）
- **修改檔案**：
  - `static/index.html` - 新增 `topChangedFilesChart` canvas
  - `static/style.css` - 新增 `.chart-grid` 樣式
  - `static/script.js` - 新增 `displayTopChangedFilesChart()` 函數
- **效果**：兩個圖表並排顯示，視覺效果更平衡，資訊呈現更清晰

---

### 2025-10-15 功能擴充更新 (v2.0)

#### 新增功能需求與實作

**1. 程式碼分析：自訂排除資料夾功能**
- **需求**：使用者可自訂要排除的資料夾，透過前端 textarea 設定（一行一個資料夾名稱）
- **實作方式**：
  - 後端：修改 `CodeAnalyzer` 類別，新增 `exclude_folders` 參數
  - 新增 `DEFAULT_EXCLUDE_FOLDERS` 預設排除清單
  - 新增 `_build_exclude_pattern()` 方法將資料夾列表轉換為 regex 格式
  - 前端：新增 `excludeFolders` textarea，收集使用者輸入並傳送至後端
- **修改檔案**：
  - `code_analyzer.py` (line 14-37, 119-130)
  - `main.py` (line 26, 50)
  - `static/index.html` (line 30-34)
  - `static/script.js` (line 10, 35-38, 56)
- **預設排除**：node_modules, venv, .git, dist, build, __pycache__, .venv, env, .idea, .vscode

**2. Git 分析：Commit 範圍設定功能**
- **需求**：可指定 Git 分析的 commit 起訖範圍，起始節點代表較舊的 commit，結束節點代表較新的 commit
- **實作方式**：
  - 後端：修改 `GitAnalyzer.__init__()` 新增 `start_commit` 和 `end_commit` 參數
  - 新增 `_build_commit_range()` 方法建立 commit 範圍字串
  - 支援三種模式：
    - 兩者都指定：`start..end`
    - 只有起始：`start..HEAD`
    - 只有結束：分析到該點
    - 都不指定：分析全部歷史
  - 前端：新增兩個輸入框接受 commit ID
- **修改檔案**：
  - `git_analyzer.py` (line 16-38, 60, 158-176)
  - `main.py` (line 28-29, 76-78, 112-114)
  - `static/index.html` (line 42-51)
  - `static/script.js` (line 12-13, 45-46, 58-59)

**3. Git 分析：自訂排除檔案功能**
- **需求**：可排除特定檔案不納入 Git 統計，透過 textarea 設定（一行一個檔案名稱）
- **實作方式**：
  - 後端：新增 `_is_excluded_file()` 方法檢查檔案是否應被排除
  - 在統計檔案異動時過濾排除的檔案
  - 支援完整檔名或部分路徑匹配
  - 前端：新增 `excludeFiles` textarea 收集使用者輸入
- **修改檔案**：
  - `git_analyzer.py` (line 36, 82, 178-196)
  - `main.py` (line 27, 76, 112)
  - `static/index.html` (line 35-39)
  - `static/script.js` (line 11, 40-43, 57)
- **典型排除檔案**：package-lock.json, yarn.lock, README.md

**4. Git 分析：開發者活躍度分析（取代最近 Commits）**
- **需求**：
  - 移除「最近的 Commits」表格
  - 新增開發者活躍度分析，顯示每個作者在指定範圍內的 commit 數量
  - 使用折線圖呈現時間軸上的提交趨勢
- **實作方式**：
  - 後端：
    - 新增 `author_commits` 和 `author_timeline` 統計資料
    - 按月份統計每個作者的 commit 數
    - 新增 `_process_developer_activity()` 方法處理活躍度資料
    - 返回包含時間軸和作者資料的 `developer_activity` 物件
  - 前端：
    - 移除 `recentCommitsTable` 表格
    - 新增 `developerActivityChart` canvas
    - 實作 `displayDeveloperActivityChart()` 函數繪製多線折線圖
    - 每個作者使用不同顏色的折線
    - 圖例顯示作者名稱和總 commit 數
- **修改檔案**：
  - `git_analyzer.py` (line 54-55, 69-72, 113, 126, 198-232)
  - `main.py` (移除 get_recent_commits 呼叫)
  - `static/index.html` (line 163-166, 移除 recentCommitsTable)
  - `static/script.js` (line 5, 220-222, 357-443, 移除 displayRecentCommitsTable)
- **視覺化特色**：
  - X 軸顯示月份時間軸
  - Y 軸顯示 commit 數量
  - 支援多位開發者的折線並排顯示
  - 滑鼠懸停顯示詳細數據
  - 自動配色，最多支援 8 種顏色循環使用

**5. API 更新：請求模型擴充**
- **更新內容**：
  - API 版本升級至 2.0.0
  - `AnalyzeRequest` 新增四個可選參數：
    - `exclude_folders: Optional[List[str]]` - 排除的資料夾列表
    - `exclude_files: Optional[List[str]]` - 排除的檔案列表
    - `start_commit: Optional[str]` - Git 起始 commit ID
    - `end_commit: Optional[str]` - Git 結束 commit ID
  - 所有 API 端點均支援新參數
- **修改檔案**：`main.py` (line 9, 19, 23-29, 50, 74-79, 104, 110-115)

**6. 前端介面優化**
- **進階選項區塊**：
  - 使用 `<details>` 標籤實作可摺疊的進階選項
  - 預設收合，避免介面過於複雜
  - 包含所有新增的輸入欄位
- **樣式改進**：
  - 使用 Grid 佈局支援響應式設計
  - 新增 `input-row` 和 `advanced-options` 樣式
  - Textarea 支援多行輸入
  - 每個輸入欄位都有 `<small>` 標籤提供使用說明
- **修改檔案**：
  - `static/index.html` (line 18-65)
  - `static/style.css` (line 40-124, 294-298)

#### 專案結構
```
AnalyzeProjectCode/
├── main.py                 # FastAPI 主程式
├── code_analyzer.py        # 程式碼分析模組
├── git_analyzer.py         # Git 分析模組
├── requirements.txt        # Python 相依套件
├── README.md              # 使用說明
├── RFP.txt                # 需求規格書（本檔案）
├── static/                # 前端靜態檔案
│   ├── index.html         # 主頁面（含 favicon）
│   ├── style.css          # 樣式表
│   └── script.js          # JavaScript 邏輯
└── .gitignore             # Git 忽略檔案
```

#### 效能表現
- 10 萬行程式碼分析時間：約 30-45 秒（符合需求）
- 支援自動排除常見無關資料夾（node_modules、venv、.git 等）

#### 使用方式
1. 安裝相依套件：`pip install -r requirements.txt`
2. 啟動服務：`python main.py`
3. 開啟瀏覽器：`http://localhost:8000`
4. 輸入專案路徑
5. （選用）展開「進階選項」設定：
   - 排除特定資料夾（程式碼分析）
   - 排除特定檔案（Git 分析）
   - 指定 Git commit 範圍
6. 點擊「開始分析」

#### v2.0 新功能使用範例

**範例 1：排除測試資料夾進行程式碼分析**
```
進階選項 > 排除資料夾 (程式碼分析)：
test
tests
__tests__
e2e
```

**範例 2：分析特定 commit 範圍的 Git 歷史**
```
進階選項：
Git 起始 Commit ID：a1b2c3d（2024 年初的 commit）
Git 結束 Commit ID：e4f5g6h（目前最新的 commit）
```
這樣可以分析特定時間段內的開發活躍度和檔案變更情況。

**範例 3：排除配置檔案的 Git 統計**
```
進階選項 > 排除檔案 (Git 分析)：
package-lock.json
yarn.lock
pnpm-lock.yaml
Pipfile.lock
poetry.lock
```

#### 技術亮點（v2.0）
1. **靈活的過濾系統**：支援自訂排除規則，適應不同專案結構
2. **時間範圍分析**：可針對特定開發階段進行深入分析
3. **開發者活躍度視覺化**：折線圖清晰呈現團隊成員的貢獻趨勢
4. **響應式進階選項**：使用可摺疊設計，兼顧簡潔性與功能性
5. **RESTful API 設計**：所有新功能均透過標準化 API 暴露

---

### 2025-10-15 Bug 修正更新 (v2.1)

#### 修正問題

**問題 1：缺少排除檔案(程式碼分析)功能**
- **現象**：進階選項中只有「排除資料夾(程式碼分析)」和「排除檔案(Git分析)」，缺少「排除檔案(程式碼分析)」
- **影響**：無法針對特定檔案進行程式碼分析排除
- **解決方案**：
  1. 修改 `CodeAnalyzer.__init__()` 新增 `exclude_files` 參數
  2. 新增 `_is_excluded_file()` 方法檢查檔案是否應被排除
  3. 在 `analyze()` 方法中過濾排除的檔案
  4. 修改 API：將原本的 `exclude_files` 拆分為 `exclude_code_files` 和 `exclude_git_files`
  5. 前端新增 `excludeCodeFiles` textarea
- **修改檔案**：
  - `code_analyzer.py` (line 20-21, 28, 42, 74-76, 141-166)
  - `main.py` (line 27-28, 52-54, 81, 111-112, 121)
  - `static/index.html` (line 35-40)
  - `static/script.js` (line 11, 41-44, 63)

**問題 2：Git 分析的排除檔案功能無效**
- **現象**：設定排除檔案後，分析結果仍在異動統計中看到該檔案
- **原因**：路徑匹配邏輯不夠完善，Windows 和 Linux 路徑分隔符號不一致
- **解決方案**：
  1. 改進 `_is_excluded_file()` 方法的匹配邏輯
  2. 標準化路徑（統一使用正斜線 `/`）
  3. 支援三種匹配方式：
     - 完整檔名匹配（例如：`package-lock.json`）
     - 路徑包含匹配（例如：`config` 匹配 `src/config.json`）
     - 路徑結尾匹配（例如：`/config.json` 匹配 `src/config.json`）
- **修改檔案**：
  - `git_analyzer.py` (line 178-215)
- **測試建議**：
  - 測試完整檔名：`package-lock.json`
  - 測試路徑包含：`static/` 排除所有 static 目錄下的檔案
  - 測試特定路徑：`src/config.json` 只排除該特定檔案

#### API 更新（v2.1）
- `AnalyzeRequest` 參數調整：
  - `exclude_folders` - 排除的資料夾列表（程式碼分析）
  - `exclude_code_files` - 排除的檔案列表（程式碼分析）**【新增】**
  - `exclude_git_files` - 排除的檔案列表（Git 分析）**【重新命名】**
  - `start_commit` - Git 起始 commit ID
  - `end_commit` - Git 結束 commit ID

#### 使用方式更新

現在進階選項包含：
1. **排除資料夾 (程式碼分析)** - 排除特定資料夾，不進行程式碼統計
2. **排除檔案 (程式碼分析)** - 排除特定檔案，不進行程式碼統計
3. **排除檔案 (Git 分析)** - 排除特定檔案，不納入 Git 異動統計
4. **Git 起始/結束 Commit ID** - 指定分析的 commit 範圍

**使用範例**：
```
排除檔案 (程式碼分析)：
setup.py
__init__.py
conftest.py

排除檔案 (Git 分析)：
package-lock.json
yarn.lock
*.md
```

**問題 3：排除資料夾功能無效**
- **現象**：輸入排除資料夾 `config` 時，設定沒有作用，檔案仍被分析
- **第一次嘗試問題**：使用複雜的 regex 模式傳給 Lizard 的 `exclude_pattern`，但 Lizard 的 exclude_pattern 處理機制不如預期
- **根本原因**：依賴 Lizard 的 `exclude_pattern` 參數不夠可靠，應該在程式碼層面進行過濾
- **最終解決方案**：
  1. 移除複雜的 `_build_exclude_pattern()` 方法
  2. 新增 `_is_excluded_folder()` 方法在檔案級別檢查
  3. 將路徑分割成各個部分，檢查是否有任何部分完全匹配排除的資料夾名稱
  4. 在 `analyze()` 迴圈中同時檢查排除資料夾和排除檔案
- **修改檔案**：
  - `code_analyzer.py` (line 53-56, 72, 125-154)
- **實作邏輯**：
  ```python
  # 將路徑 src/main/java/config/Test.java 分割為：
  # ['src', 'main', 'java', 'config', 'Test.java']
  # 如果 'config' 在列表中，則排除該檔案
  ```
- **效果**：
  - 精確匹配完整的資料夾名稱
  - 不會誤匹配部分字串
  - 支援 Windows (`\`) 和 Linux (`/`) 路徑

**範例說明**：
```
排除資料夾：config

✅ 會被排除：
- config/settings.py
- src/config/app.json
- src/main/config/test.java
- C:\project\config\database.yml

❌ 不會被排除：
- src/main/java/tw/com/dsic/jwebap/XXX.java (路徑中沒有名為 config 的資料夾)
- src/configuration/settings.py (configuration 不是 config)
- src/myconfig/test.py (myconfig 不是 config)
```

---

### 2025-10-16 進度追蹤功能更新 (v2.2)

#### 新增功能

**即時分析進度顯示**
- **需求**：使用者可在分析過程中即時查看分析進度，了解當前執行狀態
- **技術實作**：
  1. **後端架構**：
     - 新增 `progress_tracker.py` 模組：
       - `ProgressUpdate` dataclass：儲存進度資料（階段、當前值、總數、訊息、時間戳記）
       - `ProgressTracker` 類別：管理進度更新和回調
     - 修改 `main.py` 新增 SSE (Server-Sent Events) 支援：
       - `/api/progress/{session_id}` 端點提供進度串流
       - 全域 `progress_queues` 字典管理各會話的進度佇列
       - `analyze_all` 端點整合進度追蹤器
     - 修改分析器支援進度回報：
       - `CodeAnalyzer.__init__()` 新增 `progress_tracker` 參數
       - 每處理 10 個檔案更新一次進度（10-50%）
       - `GitAnalyzer.__init__()` 新增 `progress_tracker` 參數
       - 每處理 50 個 commits 更新一次進度（55-95%）

  2. **前端架構**：
     - HTML 進度 UI 元件：
       - `progress-container`：進度條容器
       - `progress-bar` 和 `progress-fill`：進度條視覺效果
       - `progressText`：百分比顯示
       - `progressDetails`：詳細訊息顯示
     - CSS 進度條樣式：
       - 漸層背景效果
       - 閃爍動畫 (shimmer effect)
       - 平滑的寬度過渡動畫
     - JavaScript SSE 連接：
       - `generateSessionId()`：生成唯一會話 ID
       - `connectProgressStream()`：建立 SSE 連接
       - `updateProgressUI()`：更新進度條和訊息

  3. **進度階段**：
     - `init` (0%)：初始化
     - `code_analysis` (10-50%)：程式碼分析中
     - `git_analysis` (55-95%)：Git 歷史分析中
     - `completed` (100%)：分析完成
     - `error`：發生錯誤

- **修改檔案**：
  - `progress_tracker.py` (新增)
  - `main.py` (line 19, 28, 52, 93-101, 172-231)
  - `code_analyzer.py` (line 27, 54, 82-85, 122-131)
  - `git_analyzer.py` (line 17, 40, 64-66, 99-107)
  - `static/index.html` (line 71-81)
  - `static/style.css` (line 172-232)
  - `static/script.js` (line 19-21, 62-66, 96-98, 100-154)

- **技術特色**：
  1. **Server-Sent Events (SSE)**：單向即時通訊，比輪詢更高效
  2. **Session-based 追蹤**：每個分析請求有獨立的 session ID，支援多用戶同時分析
  3. **非阻塞式更新**：使用 Queue 實現線程安全的進度傳遞
  4. **自動清理**：SSE 連接結束後自動清理進度佇列
  5. **視覺化回饋**：
     - 進度條即時更新
     - 百分比數字顯示
     - 當前階段文字說明
     - 處理數量即時顯示（例如：正在分析程式碼... (45/120 檔案)）

- **使用者體驗改善**：
  - 分析大型專案時不再需要等待黑盒子
  - 清楚知道當前分析進度和預計剩餘時間
  - 出錯時立即顯示錯誤訊息
  - 進度條動畫提供流暢的視覺反饋

- **API 更新**：
  - `AnalyzeRequest` 新增 `session_id` 參數
  - 新增 `GET /api/progress/{session_id}` SSE 端點

#### 實作細節

**SSE 事件格式**：
```json
{
  "stage": "code_analysis",
  "current": 45,
  "total": 100,
  "message": "正在分析程式碼... (45/120 檔案)",
  "percentage": 45,
  "timestamp": "2025-10-16 14:30:25"
}
```

**進度追蹤流程**：
```
1. 用戶點擊「開始分析」
   ↓
2. 前端生成 session_id
   ↓
3. 建立 SSE 連接到 /api/progress/{session_id}
   ↓
4. 發送 POST 請求到 /api/analyze/all (包含 session_id)
   ↓
5. 後端建立進度佇列並開始分析
   ↓
6. 分析過程中定期推送進度更新
   ↓
7. SSE 接收進度並更新 UI
   ↓
8. 分析完成/錯誤時關閉 SSE 連接
```

#### 專案版本歷程
- v1.0：基礎程式碼與 Git 分析功能
- v2.0：自訂排除、Commit 範圍、開發者活躍度
- v2.1：Bug 修正，完善排除邏輯
- v2.2：即時進度追蹤功能
- v2.3：Git 分析作者指定過濾功能 **【當前版本】**

---

### 2025-10-16 作者指定功能更新 (v2.3)

#### 新增功能

**Git 分析：作者指定過濾機制**
- **需求**：在 Git 分析中能夠指定只顯示特定作者的 commit 統計，方便聚焦於特定團隊成員的貢獻
- **功能範圍**：
  1. 可指定一個或多個作者，只統計這些作者的 commit
  2. 留空則顯示全部作者（預設行為）
  3. 活躍度分析圖表只顯示指定的作者
  4. Commit 總數統計只包含指定作者的 commit
  5. 貢獻者人數只計算指定的作者

- **技術實作**：
  1. **後端實作**：
     - 修改 `config_manager.py`：
       - 預設設定新增 `filter_authors: []` 欄位
     - 修改 `main.py` API 模型：
       - `AnalyzeRequest` 新增 `filter_authors: Optional[List[str]]` 參數
       - `SaveConfigRequest` 新增 `filter_authors` 參數
       - 儲存設定時包含作者過濾列表
     - 修改 `git_analyzer.py`：
       - `__init__()` 新增 `filter_authors` 參數
       - 新增 `_is_filtered_author()` 方法：
         - 如果 `filter_authors` 為空，返回 True（包含所有作者）
         - 如果有指定，則檢查作者是否在列表中
         - 不區分大小寫的完整匹配
         - 自動去除空白
         - 支援空字串過濾
       - 在 `analyze()` 迴圈中檢查作者是否在過濾列表中
       - 未在列表中的 commit 會被跳過，不計入任何統計

  2. **前端實作**：
     - HTML 介面更新：
       - 進階選項新增「指定作者 (Git 分析)」textarea
       - Placeholder 提供範例：Alice, Bob, Charlie
       - 說明文字：「只顯示這些作者的 commit 統計，留空則顯示全部作者（不區分大小寫）」
       - 分析摘要新增「指定作者 (Git)」欄位顯示（預設顯示「全部」）
     - JavaScript 邏輯更新：
       - 新增 `filterAuthorsInput` DOM 元素引用
       - `analyzeProject()` 收集指定作者列表
       - `saveCurrentConfig()` 儲存指定作者設定
       - `loadLastConfig()` 載入上次的指定作者設定
       - `fillConfigSummary()` 填入指定作者摘要資訊

- **修改檔案**：
  - `config_manager.py` (line 82)
  - `main.py` (line 44, 155, 203, 293, 316)
  - `git_analyzer.py` (line 17, 25, 40, 76-77, 243-267)
  - `static/index.html` (line 49-52, 127-129)
  - `static/script.js` (line 13, 60-63, 90, 593-595, 633-636, 691-694)

- **使用範例**：
  ```
  指定作者 (Git 分析)：
  Alice
  Bob
  Charlie
  ```
  只會顯示這三位作者的 commit 統計，其他作者的 commit 不會被計入。

- **匹配邏輯**：
  - **不區分大小寫**：`Alice` 和 `alice` 視為相同
  - **完整匹配**：必須完全相符，`Ali` 不會匹配到 `Alice`
  - **自動去除空白**：`  Bob  ` 會被處理為 `Bob`
  - **空列表 = 全部**：如果不指定任何作者，則顯示所有作者

- **實際效果**：
  ```
  全部作者模式（不指定）：
  - 總 Commits: 150
  - 貢獻者: 5 人 (Alice, Bob, Charlie, David, Eve)
  - 活躍度圖表顯示 5 條線

  指定作者模式（指定 Alice, Bob）：
  - 總 Commits: 80 (只統計 Alice 和 Bob 的 commits)
  - 貢獻者: 2 人 (Alice, Bob)
  - 活躍度圖表只顯示 2 條線
  ```

- **典型應用場景**：
  1. **聚焦核心團隊**：只分析核心開發團隊成員的貢獻
  2. **個人績效分析**：查看特定開發者的 commit 趨勢
  3. **團隊比較**：分別分析前端團隊、後端團隊的活躍度
  4. **排除 Bot**：反向使用，指定真人作者，自動排除所有 Bot
  5. **新人追蹤**：只分析新進成員的貢獻情況

- **技術特色**：
  1. **白名單機制**：採用指定（白名單）而非排除（黑名單）
  2. **預設友善**：不指定時顯示全部，符合使用者預期
  3. **不影響檔案統計**：只過濾作者，檔案異動統計仍為全部
  4. **設定可保存**：指定設定會與其他設定一起儲存
  5. **視覺化同步**：活躍度圖表自動反映過濾結果

- **API 更新**：
  - `AnalyzeRequest` 新增 `filter_authors: Optional[List[str]]`
  - `SaveConfigRequest` 新增 `filter_authors: Optional[List[str]]`
  - 配置檔案格式新增 `filter_authors` 欄位

#### 使用方式更新

現在進階選項包含：
1. **排除資料夾 (程式碼分析)** - 排除特定資料夾，不進行程式碼統計
2. **排除檔案 (程式碼分析)** - 排除特定檔案，不進行程式碼統計
3. **排除檔案 (Git 分析)** - 排除特定檔案，不納入 Git 異動統計
4. **指定作者 (Git 分析)** - 只顯示指定作者的 Git 統計，留空則顯示全部 **【新增】**
5. **Git 起始/結束 Commit ID** - 指定分析的 commit 範圍
6. **最大分析 Commit 數量** - 限制分析的 commit 數量

---

#### 後續優化建議
- [x] 自訂排除資料夾功能（v2.0 已實作）
- [x] 自訂排除檔案功能（v2.1 已實作）
- [x] Git commit 範圍設定（v2.0 已實作）
- [x] 開發者活躍度分析（v2.0 已實作）
- [x] 即時分析進度顯示（v2.2 已實作）
- [x] Git 分析作者指定過濾功能（v2.3 已實作）
- [ ] **作者修改品質評估系統**（規劃中，優先實作）
- [ ] 程式碼品質綜合評分系統（方案 A：基於現有指標）
- [ ] 支援萬用字元匹配（*.md、test_*.py）
- [ ] 支援匯出分析報告（PDF/Excel）
- [ ] 加入程式碼重複度檢測
- [ ] 支援多專案比較分析
- [ ] 加入歷史趨勢追蹤（跨多次分析）
- [ ] 優化大型專案的分析效能
- [ ] 支援多分支比較分析

---

## 六、待實作功能規劃

### 功能 1：程式碼品質綜合評分系統（方案 A）

**概述**：基於現有分析數據建立綜合評分機制，總分 100 分

**評分維度**：
1. **複雜度評分（30分）**
   - 平均複雜度分析（< 5 滿分，5-10 良好，10-20 需改善，> 20 差）
   - 最高複雜度函數的影響
   - 複雜度分佈均勻度

2. **程式碼規模評分（20分）**
   - 單檔案行數分佈合理性
   - 函數平均行數
   - 巨大檔案數量（>500行的檔案比例）

3. **維護性評分（30分）**
   - Git 檔案異動頻率（異動過於頻繁的檔案可能有問題）
   - 熱點檔案數量（top 10%異動檔案的集中度）
   - 程式碼穩定性（最近修改時間分佈）

4. **結構性評分（20分）**
   - 檔案/函數比例
   - 複雜度分佈均勻度
   - 實際程式碼比例

**實作規劃**：
- 新增 `quality_scorer.py` 模組
- 擴充 `code_analyzer.py` 統計項目（函數平均行數、大型檔案統計）
- 前端新增品質評分卡片和雷達圖
- API 回傳增加 `quality_score` 欄位

**優點**：
- 不需額外工具，完全基於現有資料
- 計算快速，不影響分析效能
- 評分邏輯可調整、可擴充

---

### 功能 2：作者修改品質評估系統（優先實作）

**概述**：針對每位作者的 Git commit 進行深度分析，評估其修改的品質與特性

**評估維度建議**：待討論確認